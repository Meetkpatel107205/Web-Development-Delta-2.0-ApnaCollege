===> Operators in JavaScript :-

---> What are JavaScript Operators?
Ans. JavaScript operators are special symbols used to perform operations on operands, which can be
     values or variables. They allow you to manipulate data and perform computations.

---> Example :-

  -> +--------------------------+
     |         ---+             |
     | let a = 5  | <-------------------- Operands       
     | let b = 5  |             |
     |         ---+             |
     | let sum = a + b          |
     |             ^            |
     |             |            |
     |             +--------------------- Operator
     |                          |
     | console.log("Sum =",c)   |
     |                          |
     +--------------------------+

---> Types of Operators in JavaScript :-

  -> [1.] Arithmetic Operators
     [2.] Assignment Operators
     [3.] Comparison Operators
     [4.] Logical Operators
     [5.] Bitwise Operators
     [6.] String Operators
     [7.] Conditional(Ternary) Operator
     [8.] Type Operators
     [9.] Comma Operators
     [10.] Unary Operators

---> 1.) Arithmetic Operators :-

  -> +===========+===============================+
     | Operator  | Descriptioin                  |
     +===========+===============================+
     |     +     | Addition                      |
     +-----------+-------------------------------+
     |     -     | Subtraction                   |
     +-----------+-------------------------------+
     |     *     | Multiplication                |
     +-----------+-------------------------------+
     |     **    | Exponentiation                |
     +-----------+-------------------------------+
     |     /     | Division                      |
     +-----------+-------------------------------+
     |     %     | Modulus (Division Remainder)  |
     +-----------+-------------------------------+
     |     ++    | Increment                     |
     +-----------+-------------------------------+
     |     --    | Decrement                     |
     +===========+===============================+

---> 2.) Assignment Operators :-

  -> +===========+=========+============+
     | Operator  | Example | Same As    |
     +===========+=========+============+
     |     =     | x = y   | x = y      |
     +-----------+---------+------------+
     |     =+    | x += y  | x = x + y  |
     +-----------+---------+------------+
     |     -+    | x -= y  | x = x - y  |
     +-----------+---------+------------+
     |     *=    | x *= y  | x = x * y  |
     +-----------+---------+------------+
     |     /=    | x /= y  | x = x / y  |
     +-----------+---------+------------+
     |     %=    | x %= y  | x = x % y  |
     +-----------+---------+------------+
     |     **=   | x **= y | x = x ** y |
     +===========+======================+

---> 3.) Comparison Operator :-

  -> +============+===================================+
     | Operator   | Descriptioin                      |
     +============+===================================+
     |     ==     | Equal to                          |
     +------------+-----------------------------------+
     |     ===    | Equal value and equal type        |
     +------------+-----------------------------------+
     |     !=     | Not equal                         |
     +------------+-----------------------------------+
     |     !==    | Not equal value or not equal type |
     +------------+-----------------------------------+
     |      >     | Greater than                      |
     +------------+-----------------------------------+
     |      <     | Less than                         |
     +------------+-----------------------------------+
     |      >=    | Greater than or equal to          |
     +------------+-----------------------------------+
     |      <=    | Less than or equal to             |
     +============+===================================+

---> 4.) Logical Operators :-

  -> +===========+===============+
     | Operator  | Descriptioin  |
     +===========+===============+
     |     &&    | Logical And   |
     +-----------+---------------+
     |     ||    | Logical Or    |
     +-----------+---------------+
     |      !    | Logical Not   |
     +===========+===============+

---> 5.) Bitwise Operator :-

  -> +===========+======================+=========+=============+========+=========+
     | Operator  | Descriptioin         | Example | Same as     | Result | Decimal |
     +===========+======================+=========+=============+========+=========+
     |     &     | AND                  | 5 & 1   | 0101 & 0001 | 0001   | 1       |
     +-----------+----------------------+---------+-------------+--------+---------+
     |     |     | OR                   | 5 | 1   | 0101 | 0001 | 0101   | 5       |
     +-----------+----------------------+---------+-------------+--------+---------+
     |     ~     | NOT                  | ~ 5     |   ~ 0101    | 1010   | 10      |
     +-----------+----------------------+---------+-------------+--------+---------+
     |     ^     | XOR                  | 5 ^ 1   | 0101 ^ 0001 | 0100   | 4       |
     +-----------+----------------------+---------+-------------+--------+---------+
     |     <<    | Left shift           | 5 << 1  | 0101 << 1   | 1010   | 10      |
     +-----------+----------------------+---------+-------------+--------+---------+
     |     >>    | Right shift          | 5 >> 1  | 0101 >> 1   | 0010   | 2       |
     +-----------+----------------------+---------+-------------+--------+---------+
     |     >>>   | Unsigned Right shift | 5 >>> 1 | 0101 >>> 1  | 0010   | 2       |
     +===========+======================+=========+=============+========+=========+

  -> Notes :-
  
  -> By Default Javascript takes 32 Bits in Binary form of any Decimal Number.
     For Ex. Decimal : 5 ===> Binary : 00000000000000000000000000000101 (32 Bits)

  -> Bit operators work on 32 bits numbers.
  -> Any numeric operand in the operation is converted into a 32 bit number. The result is converted back to a JavaScript number.

---> 6.) String Operators :-

  -> +=============+=========================================+=====================+===============+
     | Operator    | Descriptioin                            | Example             | Output        |
     +=============+=========================================+=====================+===============+
     |     +       | Concatenation Operator - joins two      | "Hello" + "World"   | "Hello World" |
     |             | strings.                                |                     |               |
     +-------------+-----------------------------------------+---------------------+---------------+
     |     +=      | Concatenation assignment - append one   | let msg = "Hello";  | "Hello World" |
     |             | string to another.                      | msg += " World";    |               |         
     +-------------+-----------------------------------------+---------------------+---------------+
     |     ==      | Equality - checks if two strings are    | 'apple' == 'apple'  | true          |
     |             | equal.                                  |                     |               |
     +-------------+-----------------------------------------+---------------------+---------------+
     |     ===     | Strict Equality - checks if values and  |                     |               |
     |             | values and types are equal              | '10' === '10'       | true          |
     |             | (case-sensitive).                       |                     |               |
     +-------------+-----------------------------------------+---------------------+---------------+
     |     !=      | Inequality - checks if two strings are  | 'apple' != 'banana' | true          |
     |             | are not equal.                          |                     |               |
     +-------------+-----------------------------------------+---------------------+---------------+
     |     !==     | Strict Inequality - checks if values    | '10' !== 10         | true          |
     |             | or types are not equal.                 |                     |               |
     +-------------+-----------------------------------------+---------------------+---------------+
     |      <      | Less than - compares strings based on   | 'apple' < 'banana'  | true          |
     |             | Unicode order.                          |                     |               |
     +-------------+-----------------------------------------+---------------------+---------------+
     |      >      | Greater than - compares strings based   | 'grape' > 'banana'  | true          |
     |             | on Unicode order.                       |                     |               |
     +-------------+-----------------------------------------+---------------------+---------------+
     |     <=      | Less than or equal to                   | 'apple' <= 'apple'  | true          |
     +-------------+-----------------------------------------+---------------------+---------------+
     |     >=      | Greater than or equal to                | 'banana' >= 'apple' | true          |
     +=============+=========================================+=====================+===============+

---> 7.) Type Operators :-

  -> +=============+=============================================================+
     |   Operator  | Descriptioin                                                |
     +=============+=============================================================+
     |    typeof   | Returns the type of variable                                |
     +-------------+-------------------------------------------------------------+
     |  instanceof | Returns true if an object is an instance of an object type  |
     +=============+=============================================================+

---> 8.) Comma Operator :-

  -> +===========+=================================+==================+========+
     | Operator  | Descriptioin                    | Example          | Output |
     +===========+=================================+==================+========+
     |     ,     | Evaluates multiple expressions, | let x = (1,2,3); | 3      |
     |           | returns the last result.        | console.log(x);  |        |
     +===========+======================+=========+=============+==============+

---> 9.) Unary Operators :-

  -> +==========+=================================+===================+===========+
     | Operator | Descriptioin                    | Example           | Output    |
     +==========+=================================+===================+===========+
     |     +    | Unary plus (converts to number) | +'5'              | 5         |
     +----------+---------------------------------+-------------------+-----------+
     |     -    | Unary minus (negates a value)   | -5                | -5        |
     +----------+---------------------------------+-------------------+-----------+
     |          |                                 | let x = 5;        |           |
     |    ++    | Incremnt (adds 1)               | x++;              | 6         |
     |          |                                 | console.log(x);   |           |
     +----------+---------------------------------+-------------------+-----------+
     |          |                                 | let x = 5;        |           |
     |    --    | Decrement (subtracts 1)         | x--;              | 4         |
     |          |                                 | console.log(x);   |           |
     +----------+---------------------------------+-------------------+-----------+
     |   void   | Evaluates an expression and     | void(0)           | undefined |
     |          | returns undefined.              |                   |           |
     +----------+---------------------------------+-------------------+-----------+
     |          |                                 | let obj = {a:1};  |           |
     |  delete  | Delete an object property       | delete obj.a;     | {}        |
     |          |                                 | console.log(obj); |           |
     +==========+======================+=========+==========+=====================+